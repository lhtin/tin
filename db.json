{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/images/logo.jpg","path":"images/logo.jpg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-landscape/.gitignore","hash":"4c78c751a5bbca6b54ad06922947573c967d51c8","modified":1592144269438},{"_id":"themes/hexo-theme-landscape/.travis.yml","hash":"0f850b4da6ba203ddc399bd7ffd675ca4e3da791","modified":1592144269438},{"_id":"themes/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1592144269439},{"_id":"themes/hexo-theme-landscape/README.md","hash":"f723575f1243852b8bec9ba05004500b943e20f1","modified":1592144269439},{"_id":"themes/hexo-theme-landscape/_config.yml","hash":"33a60bb6efd5e8d61e25b893e5da145f34931a05","modified":1592145263657},{"_id":"themes/hexo-theme-landscape/package.json","hash":"c35345c642b4ec5287728d3a9e76f5fbeeb8b81c","modified":1592144269459},{"_id":"source/_drafts/llvm-1.md","hash":"6df86e56a9edbd97be9490a7f23a7f7743e00f35","modified":1593442512121},{"_id":"source/_posts/llvm-0.md","hash":"fda8d04f2063b722edc9c08dbf3b4d3277c43b81","modified":1593485960270},{"_id":"source/_posts/hexo-guide.md","hash":"7286f2d3b2985d3169bcbad04206bd94f3d9ef47","modified":1593450610214},{"_id":"source/images/logo.jpg","hash":"576d1ad1ad886e33802a1071f678ca8af6575823","modified":1592130886406},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1592138202203},{"_id":"themes/hexo-theme-landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1592144269440},{"_id":"themes/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1592144269440},{"_id":"themes/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1592144269442},{"_id":"themes/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1592144269444},{"_id":"themes/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1592144269444},{"_id":"themes/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1592144269439},{"_id":"themes/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1592144269444},{"_id":"themes/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1592144269444},{"_id":"themes/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1592144269445},{"_id":"themes/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1592144269446},{"_id":"themes/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1592144269447},{"_id":"themes/hexo-theme-landscape/languages/zh-CN.yml","hash":"88c5beedec7042d388755278e3cd9f4296a6ed93","modified":1593270419541},{"_id":"themes/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1592144269441},{"_id":"themes/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1592144269445},{"_id":"themes/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1592144269449},{"_id":"themes/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1592144269457},{"_id":"themes/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1592144269443},{"_id":"themes/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1592144269458},{"_id":"themes/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1592144269458},{"_id":"themes/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1592144269458},{"_id":"themes/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1592144269458},{"_id":"themes/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1592144269459},{"_id":"themes/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1592144269459},{"_id":"themes/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1592144269459},{"_id":"themes/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1592144269455},{"_id":"themes/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1592144269455},{"_id":"themes/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1592144269455},{"_id":"themes/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1592144269455},{"_id":"themes/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1592144269456},{"_id":"themes/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1592144269450},{"_id":"themes/hexo-theme-landscape/layout/_partial/analytics.ejs","hash":"76b5b8caba94e6e9e5b876497d0874367908f388","modified":1592144269450},{"_id":"themes/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1592144269451},{"_id":"themes/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1592144269451},{"_id":"themes/hexo-theme-landscape/layout/_partial/article.ejs","hash":"551cd7cc595a48c5e6df774a39e1a4d2906c34d9","modified":1592145509699},{"_id":"themes/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"8488955d4a8e1459aff71eb6747f647663774b42","modified":1592145290321},{"_id":"themes/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1592144269451},{"_id":"themes/hexo-theme-landscape/layout/_partial/header.ejs","hash":"997923d389ba294e89ce1d3a23b063b6e210a197","modified":1592144269452},{"_id":"themes/hexo-theme-landscape/layout/_partial/head.ejs","hash":"7c7c17e58292bd3e463a489b7ca70b7ae66242d3","modified":1592144269452},{"_id":"themes/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1592144269452},{"_id":"themes/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1592144269454},{"_id":"themes/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1592144269460},{"_id":"themes/hexo-theme-landscape/source/css/_variables.styl","hash":"161b4bf70a9c74cb00d91a167728e677b2e00fd8","modified":1593152180147},{"_id":"themes/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1592144269479},{"_id":"themes/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1592144269482},{"_id":"themes/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1592144269480},{"_id":"themes/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1592144269481},{"_id":"themes/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1592144269480},{"_id":"themes/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1592144269453},{"_id":"themes/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1592144269453},{"_id":"themes/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1592144269453},{"_id":"themes/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1592144269453},{"_id":"themes/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1592144269454},{"_id":"themes/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"ab51fc70770d5409585686d4bccc68bfb3d1b7b4","modified":1592144269454},{"_id":"themes/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1592144269460},{"_id":"themes/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1592144269461},{"_id":"themes/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"b45dcda3db2daf4389a300c5865976e085bc938b","modified":1592144269461},{"_id":"themes/hexo-theme-landscape/source/css/_partial/article.styl","hash":"f2fb2084784df43f699d9112987df9a47ac76ae5","modified":1592144269460},{"_id":"themes/hexo-theme-landscape/source/css/_partial/header.styl","hash":"e74194d4aa2ed7350894fc69d204e5dfa1839aed","modified":1592144269461},{"_id":"themes/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1592144269461},{"_id":"themes/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1592144269461},{"_id":"themes/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1592144269462},{"_id":"themes/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1592144269462},{"_id":"themes/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1592144269462},{"_id":"themes/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1592144269462},{"_id":"themes/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1592144269463},{"_id":"themes/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1592144269476},{"_id":"themes/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1592144269475},{"_id":"themes/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1592144269469},{"_id":"themes/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1592144269465},{"_id":"themes/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1592144269474},{"_id":"themes/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1592144269479},{"_id":"themes/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1592144269471},{"_id":"public/2020/06/25/llvm-0/index.html","hash":"f0e387e2ec6eb446e03b2877546239ba316f27ac","modified":1593486303252},{"_id":"public/2020/06/14/hexo-guide/index.html","hash":"e1007e0276f0ba5168c133c26b5dcab2c41ad9ac","modified":1593486303252},{"_id":"public/archives/index.html","hash":"35e798bdcaea490eeeaed3e0fd1a9bdd4731d82c","modified":1593486303252},{"_id":"public/archives/2020/index.html","hash":"1eb4e2a5aa95de2458d436bb6bc181c4ab715c61","modified":1593486303252},{"_id":"public/archives/2020/06/index.html","hash":"642bc38bc3ac41c1db262f0d3ebfd442a0b1a6b6","modified":1593486303252},{"_id":"public/categories/llvm/index.html","hash":"f4dd0edc613b46a60ead2ea71f197630f2490f3e","modified":1593486303252},{"_id":"public/categories/guide/index.html","hash":"2c07471e35e55ddaff9e8c80d70c1b98acc1b8e9","modified":1593486303252},{"_id":"public/index.html","hash":"e546f818408b5fee817c3d5ca55d12e8d32b9ea8","modified":1593486303252},{"_id":"public/tags/llvm/index.html","hash":"d2f5310fdc0a45a807f82a45e87a4fe9acc8f573","modified":1593486303252},{"_id":"public/tags/guide/index.html","hash":"b8d2db9e4a80f2ec050d45048e70d7ca738d7ade","modified":1593486303252},{"_id":"public/images/logo.jpg","hash":"576d1ad1ad886e33802a1071f678ca8af6575823","modified":1593486303252},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1593486303252},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1593486303252},{"_id":"public/css/style.css","hash":"eb01cea578e3c9387b3dd903ecd78abe50acd0e6","modified":1593486303252},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1593486303252},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1593486303252},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1593486303252},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1593486303252},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1593486303252},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1593486303252},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1593486303252},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1593486303252},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1593486303252}],"Category":[{"name":"llvm","_id":"ckc1clp1b0002acjkf15hgfd8"},{"name":"guide","_id":"ckc1clp1h0005acjkei870rmi"}],"Data":[],"Page":[],"Post":[{"title":"学习LLVM第1篇：官方入门教程","date":"2020-06-29T14:54:27.000Z","excerpt":"本文是我学习LLVM官方入门教程（My First Language Frontend with LLVM Tutorial）时的一些笔记。","_content":"\n\n\n官方教程链接：\n\n## 简介\n\n\n\n## 遇到的问题\n\n- 第4章节，编译时需要给`--libs`增加`orcjit`参数\n  - 原来：`llvm-config --cxxflags --ldflags --system-libs --libs core mcjit native`\n  - 改为：`llvm-config --cxxflags --ldflags --system-libs --libs core mcjit native orcjit` ","source":"_drafts/llvm-1.md","raw":"---\ntitle: 学习LLVM第1篇：官方入门教程\ndate: 2020-06-29 22:54:27\ncategories:\n- llvm\ntags:\n- llvm\nexcerpt: 本文是我学习LLVM官方入门教程（My First Language Frontend with LLVM Tutorial）时的一些笔记。\n---\n\n\n\n官方教程链接：\n\n## 简介\n\n\n\n## 遇到的问题\n\n- 第4章节，编译时需要给`--libs`增加`orcjit`参数\n  - 原来：`llvm-config --cxxflags --ldflags --system-libs --libs core mcjit native`\n  - 改为：`llvm-config --cxxflags --ldflags --system-libs --libs core mcjit native orcjit` ","slug":"llvm-1","published":0,"updated":"2020-06-29T14:55:12.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc1clp120000acjkf33f5ksc","content":"<p>官方教程链接：</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ul>\n<li>第4章节，编译时需要给<code>--libs</code>增加<code>orcjit</code>参数<ul>\n<li>原来：<code>llvm-config --cxxflags --ldflags --system-libs --libs core mcjit native</code></li>\n<li>改为：<code>llvm-config --cxxflags --ldflags --system-libs --libs core mcjit native orcjit</code> </li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"more":"<p>官方教程链接：</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ul>\n<li>第4章节，编译时需要给<code>--libs</code>增加<code>orcjit</code>参数<ul>\n<li>原来：<code>llvm-config --cxxflags --ldflags --system-libs --libs core mcjit native</code></li>\n<li>改为：<code>llvm-config --cxxflags --ldflags --system-libs --libs core mcjit native orcjit</code> </li>\n</ul>\n</li>\n</ul>\n"},{"title":"本站建造过程记录","comments":1,"date":"2020-06-13T16:00:00.000Z","excerpt":"本文详细记录了使用Hexo创建静态博客的过程。","_content":"\n本文记录了使用Hexo创建静态博客的过程。我的需求是为了学习的内容找一个地方系统的记录下来，并且可以很方便的查看，但是又不想自己去购买服务器。另外写作的语言要求为Markdown。我首先想到的是使用Gitee Pages服务，免费且在国内访问速度还不错。下面就来一一介绍这整个的过程。\n\n## 使用Gitee Pages服务\n\n在Gitee上创建一个账号，然后在创建一个名称跟账号同名的仓库。同名的作用是为了在访问时不需要指定仓库名称。比如说我的账户名是[lhtin](https://gitee.com/lhtin)，仓库名也为[lhtin](https://gitee.com/lhtin/lhtin)，这样就可以直接通过 https://lhtin.gitee.io 访问，而不需要加上仓库的名称作为访问的路径（ https://lhtin.gitee.io/lhtin ）。\n\n创建了仓库之后，就可以对仓库启动Pages服务了，具体设置方式请直接参考[官方指南](https://gitee.com/help/articles/4136)。这样静态服务器就有了。\n\n## 使用Hexo博客框架\n\n为了尽可能将时间花在写博客上面，我直接选择使用Hexo博客框架。这个框架非常灵活，除了基本的将Markdown编译为HTML能力之外，还提供了集中组织文章的方式。比如根据时间进行归档，根据标签和分类进行文章统计和检索。另外你也可以定义很多新的玩法，扩展性很好。下面介绍我的使用过程。\n\n### 初始化博客项目\n\n首先使用npm安装Hexo命令行工具，安装完之后初始化一个空的项目：\n\n```shell\nnpm install -g hexo-cli\n\nhexo init <name>\n\ncd <name>\nnpm install\n```\n\n执行完了之后，项目默认使用landscape主题。初始化的项目中有以下几个脚本命名可以使用：\n\n```shell\nnpm run server // 启动本地server\nnpm run build // 将项目打包成静态文件，存放在public目录\nnpm run deploy // 将public中的内容上传到指定的git仓库分支，需要在_config.yml中配置仓库信息，后面会介绍如何配置\n\nhexo new post hexo-guide // 根据scaffolds中的post模版生成文章的基本结构，会自动设置title和日期，生成的文件会存放在source/_posts中\n```\n\n更多指南请前往[Hexo官方文档](https://hexo.io/zh-cn/docs)。\n\n### 根据需要修改配置\n\n在初始化完了项目之后，我做了一些修改，以满足我的需求。首先定义网站的相关信息（更多配置说明请参见[官方文档-配置](https://hexo.io/zh-cn/docs/configuration)）：\n\n```yml\n# 项目根目录下的_config.yml文件\ntitle: 01的世界\nsubtitle: 计算机的世界没有秘密\ndescription: 这里有关于计算机的方方面面\nkeywords: 01的世界\nauthor: 钉子哥\nlanguage: zh-CN # 会影响主题中的语言选择\ntimezone: Asia/Shanghai\n\n// 本博客部署的地址\nurl: https://lhtin.gitee.io\nroot: /\n```\n\n然后还需要根据我自己的要求，修改默认主题[landscape](https://github.com/hexojs/hexo-theme-landscape)的部分内容。所有修改的内容可以参见我fork出来的[仓库](https://gitee.com/lhtin/hexo-theme-landscape)。这里我列出主要的修改：\n\n- 将一些英文翻译为中文，比如Home -> 首页，Read More -> 阅读全文\n- 去掉tagcloud，调整widgets的顺序，打开展示分类和标签中对应的文章数量的flag\n- 添加百度统计，并和Google统计合并到一个ejs文件\n- 去掉文章头部的日期和分类展示。让文章标题居中展示，并且在文章下面展示文章作者和日期\n- 去掉右上角的导航，固定展示为“首页”\n- 修改首页展示文章摘抄的样式\n\n### 构建和部署\n\n当你写好了一篇博客文章之后，就需要构建成静态文件，以便上传到Gitee Pages上。Hexo在构建时，是根据所选主题中对应的[ejs模版](https://ejs.co)，填充所需参数（大部分来自yml文件和Markdown文件头部信息）和文章内容之后，就会生成HTML文件。\n\n生成HTML文件后，可以通过使用部署插件hexo-deployer-git，将生成的public目录中的文件自动上传到指定的git上，上传之前需要先在_config.yml中配置Git相关信息。\n\n```yml\n# 项目根目录下的_config.yml文件\ndeploy:\n  type: git\n  repo: https://gitee.com/lhtin/lhtin.git\n  branch: page\n```\n\n构建和部署的命令如下：\n\n```\nnpm run build\nnpm install --save-dev hexo-deployer-git\nnpm run deploy\n```\n\n因为build和deploy经常一起用，于是我将两个命令整合成一个，取名d：\n\n```json\n{\n  \"scripts\": {\n    \"d\": \"npm run clean && npm run build && npm run deploy\"\n  }\n}\n```\n\n这样就完成了博客的构建和上传。上传完之后需要注意下，Gitee Pages并不支持自动更新你上传的内容，你需要手动进到项目中的Pages服务，点击更新进行手动更新。~~或许可以直接集成到d命令中，push完之后直接调用Pages的更新接口。这个等以后有时间了再来折腾下。~~目前已经可以通过命令行触发Pages自动部署了，更多内容可以参加[gitee](https://www.npmjs.com/package/gitee)这个npm模块。","source":"_posts/hexo-guide.md","raw":"---\ntitle: 本站建造过程记录\ncomments: true\ndate: 2020/06/14\ntag:\n- guide\ncategory:\n- guide\nexcerpt: 本文详细记录了使用Hexo创建静态博客的过程。\n---\n\n本文记录了使用Hexo创建静态博客的过程。我的需求是为了学习的内容找一个地方系统的记录下来，并且可以很方便的查看，但是又不想自己去购买服务器。另外写作的语言要求为Markdown。我首先想到的是使用Gitee Pages服务，免费且在国内访问速度还不错。下面就来一一介绍这整个的过程。\n\n## 使用Gitee Pages服务\n\n在Gitee上创建一个账号，然后在创建一个名称跟账号同名的仓库。同名的作用是为了在访问时不需要指定仓库名称。比如说我的账户名是[lhtin](https://gitee.com/lhtin)，仓库名也为[lhtin](https://gitee.com/lhtin/lhtin)，这样就可以直接通过 https://lhtin.gitee.io 访问，而不需要加上仓库的名称作为访问的路径（ https://lhtin.gitee.io/lhtin ）。\n\n创建了仓库之后，就可以对仓库启动Pages服务了，具体设置方式请直接参考[官方指南](https://gitee.com/help/articles/4136)。这样静态服务器就有了。\n\n## 使用Hexo博客框架\n\n为了尽可能将时间花在写博客上面，我直接选择使用Hexo博客框架。这个框架非常灵活，除了基本的将Markdown编译为HTML能力之外，还提供了集中组织文章的方式。比如根据时间进行归档，根据标签和分类进行文章统计和检索。另外你也可以定义很多新的玩法，扩展性很好。下面介绍我的使用过程。\n\n### 初始化博客项目\n\n首先使用npm安装Hexo命令行工具，安装完之后初始化一个空的项目：\n\n```shell\nnpm install -g hexo-cli\n\nhexo init <name>\n\ncd <name>\nnpm install\n```\n\n执行完了之后，项目默认使用landscape主题。初始化的项目中有以下几个脚本命名可以使用：\n\n```shell\nnpm run server // 启动本地server\nnpm run build // 将项目打包成静态文件，存放在public目录\nnpm run deploy // 将public中的内容上传到指定的git仓库分支，需要在_config.yml中配置仓库信息，后面会介绍如何配置\n\nhexo new post hexo-guide // 根据scaffolds中的post模版生成文章的基本结构，会自动设置title和日期，生成的文件会存放在source/_posts中\n```\n\n更多指南请前往[Hexo官方文档](https://hexo.io/zh-cn/docs)。\n\n### 根据需要修改配置\n\n在初始化完了项目之后，我做了一些修改，以满足我的需求。首先定义网站的相关信息（更多配置说明请参见[官方文档-配置](https://hexo.io/zh-cn/docs/configuration)）：\n\n```yml\n# 项目根目录下的_config.yml文件\ntitle: 01的世界\nsubtitle: 计算机的世界没有秘密\ndescription: 这里有关于计算机的方方面面\nkeywords: 01的世界\nauthor: 钉子哥\nlanguage: zh-CN # 会影响主题中的语言选择\ntimezone: Asia/Shanghai\n\n// 本博客部署的地址\nurl: https://lhtin.gitee.io\nroot: /\n```\n\n然后还需要根据我自己的要求，修改默认主题[landscape](https://github.com/hexojs/hexo-theme-landscape)的部分内容。所有修改的内容可以参见我fork出来的[仓库](https://gitee.com/lhtin/hexo-theme-landscape)。这里我列出主要的修改：\n\n- 将一些英文翻译为中文，比如Home -> 首页，Read More -> 阅读全文\n- 去掉tagcloud，调整widgets的顺序，打开展示分类和标签中对应的文章数量的flag\n- 添加百度统计，并和Google统计合并到一个ejs文件\n- 去掉文章头部的日期和分类展示。让文章标题居中展示，并且在文章下面展示文章作者和日期\n- 去掉右上角的导航，固定展示为“首页”\n- 修改首页展示文章摘抄的样式\n\n### 构建和部署\n\n当你写好了一篇博客文章之后，就需要构建成静态文件，以便上传到Gitee Pages上。Hexo在构建时，是根据所选主题中对应的[ejs模版](https://ejs.co)，填充所需参数（大部分来自yml文件和Markdown文件头部信息）和文章内容之后，就会生成HTML文件。\n\n生成HTML文件后，可以通过使用部署插件hexo-deployer-git，将生成的public目录中的文件自动上传到指定的git上，上传之前需要先在_config.yml中配置Git相关信息。\n\n```yml\n# 项目根目录下的_config.yml文件\ndeploy:\n  type: git\n  repo: https://gitee.com/lhtin/lhtin.git\n  branch: page\n```\n\n构建和部署的命令如下：\n\n```\nnpm run build\nnpm install --save-dev hexo-deployer-git\nnpm run deploy\n```\n\n因为build和deploy经常一起用，于是我将两个命令整合成一个，取名d：\n\n```json\n{\n  \"scripts\": {\n    \"d\": \"npm run clean && npm run build && npm run deploy\"\n  }\n}\n```\n\n这样就完成了博客的构建和上传。上传完之后需要注意下，Gitee Pages并不支持自动更新你上传的内容，你需要手动进到项目中的Pages服务，点击更新进行手动更新。~~或许可以直接集成到d命令中，push完之后直接调用Pages的更新接口。这个等以后有时间了再来折腾下。~~目前已经可以通过命令行触发Pages自动部署了，更多内容可以参加[gitee](https://www.npmjs.com/package/gitee)这个npm模块。","slug":"hexo-guide","published":1,"updated":"2020-06-29T17:10:10.214Z","layout":"post","photos":[],"link":"","_id":"ckc1clp180001acjk8vzkhqqc","content":"<p>本文记录了使用Hexo创建静态博客的过程。我的需求是为了学习的内容找一个地方系统的记录下来，并且可以很方便的查看，但是又不想自己去购买服务器。另外写作的语言要求为Markdown。我首先想到的是使用Gitee Pages服务，免费且在国内访问速度还不错。下面就来一一介绍这整个的过程。</p>\n<h2 id=\"使用Gitee-Pages服务\"><a href=\"#使用Gitee-Pages服务\" class=\"headerlink\" title=\"使用Gitee Pages服务\"></a>使用Gitee Pages服务</h2><p>在Gitee上创建一个账号，然后在创建一个名称跟账号同名的仓库。同名的作用是为了在访问时不需要指定仓库名称。比如说我的账户名是<a href=\"https://gitee.com/lhtin\" target=\"_blank\" rel=\"noopener\">lhtin</a>，仓库名也为<a href=\"https://gitee.com/lhtin/lhtin\" target=\"_blank\" rel=\"noopener\">lhtin</a>，这样就可以直接通过 <a href=\"https://lhtin.gitee.io\">https://lhtin.gitee.io</a> 访问，而不需要加上仓库的名称作为访问的路径（ <a href=\"https://lhtin.gitee.io/lhtin\">https://lhtin.gitee.io/lhtin</a> ）。</p>\n<p>创建了仓库之后，就可以对仓库启动Pages服务了，具体设置方式请直接参考<a href=\"https://gitee.com/help/articles/4136\" target=\"_blank\" rel=\"noopener\">官方指南</a>。这样静态服务器就有了。</p>\n<h2 id=\"使用Hexo博客框架\"><a href=\"#使用Hexo博客框架\" class=\"headerlink\" title=\"使用Hexo博客框架\"></a>使用Hexo博客框架</h2><p>为了尽可能将时间花在写博客上面，我直接选择使用Hexo博客框架。这个框架非常灵活，除了基本的将Markdown编译为HTML能力之外，还提供了集中组织文章的方式。比如根据时间进行归档，根据标签和分类进行文章统计和检索。另外你也可以定义很多新的玩法，扩展性很好。下面介绍我的使用过程。</p>\n<h3 id=\"初始化博客项目\"><a href=\"#初始化博客项目\" class=\"headerlink\" title=\"初始化博客项目\"></a>初始化博客项目</h3><p>首先使用npm安装Hexo命令行工具，安装完之后初始化一个空的项目：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"></span><br><span class=\"line\">hexo init &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">cd &lt;name&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>执行完了之后，项目默认使用landscape主题。初始化的项目中有以下几个脚本命名可以使用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run server // 启动本地server</span><br><span class=\"line\">npm run build // 将项目打包成静态文件，存放在public目录</span><br><span class=\"line\">npm run deploy // 将public中的内容上传到指定的git仓库分支，需要在_config.yml中配置仓库信息，后面会介绍如何配置</span><br><span class=\"line\"></span><br><span class=\"line\">hexo new post hexo-guide // 根据scaffolds中的post模版生成文章的基本结构，会自动设置title和日期，生成的文件会存放在source/_posts中</span><br></pre></td></tr></table></figure>\n\n<p>更多指南请前往<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a>。</p>\n<h3 id=\"根据需要修改配置\"><a href=\"#根据需要修改配置\" class=\"headerlink\" title=\"根据需要修改配置\"></a>根据需要修改配置</h3><p>在初始化完了项目之后，我做了一些修改，以满足我的需求。首先定义网站的相关信息（更多配置说明请参见<a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">官方文档-配置</a>）：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 项目根目录下的_config.yml文件</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"number\">01</span><span class=\"string\">的世界</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">计算机的世界没有秘密</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">这里有关于计算机的方方面面</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span> <span class=\"number\">01</span><span class=\"string\">的世界</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">钉子哥</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span> <span class=\"comment\"># 会影响主题中的语言选择</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">本博客部署的地址</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://lhtin.gitee.io</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n\n<p>然后还需要根据我自己的要求，修改默认主题<a href=\"https://github.com/hexojs/hexo-theme-landscape\" target=\"_blank\" rel=\"noopener\">landscape</a>的部分内容。所有修改的内容可以参见我fork出来的<a href=\"https://gitee.com/lhtin/hexo-theme-landscape\" target=\"_blank\" rel=\"noopener\">仓库</a>。这里我列出主要的修改：</p>\n<ul>\n<li>将一些英文翻译为中文，比如Home -&gt; 首页，Read More -&gt; 阅读全文</li>\n<li>去掉tagcloud，调整widgets的顺序，打开展示分类和标签中对应的文章数量的flag</li>\n<li>添加百度统计，并和Google统计合并到一个ejs文件</li>\n<li>去掉文章头部的日期和分类展示。让文章标题居中展示，并且在文章下面展示文章作者和日期</li>\n<li>去掉右上角的导航，固定展示为“首页”</li>\n<li>修改首页展示文章摘抄的样式</li>\n</ul>\n<h3 id=\"构建和部署\"><a href=\"#构建和部署\" class=\"headerlink\" title=\"构建和部署\"></a>构建和部署</h3><p>当你写好了一篇博客文章之后，就需要构建成静态文件，以便上传到Gitee Pages上。Hexo在构建时，是根据所选主题中对应的<a href=\"https://ejs.co\" target=\"_blank\" rel=\"noopener\">ejs模版</a>，填充所需参数（大部分来自yml文件和Markdown文件头部信息）和文章内容之后，就会生成HTML文件。</p>\n<p>生成HTML文件后，可以通过使用部署插件hexo-deployer-git，将生成的public目录中的文件自动上传到指定的git上，上传之前需要先在_config.yml中配置Git相关信息。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 项目根目录下的_config.yml文件</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://gitee.com/lhtin/lhtin.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">page</span></span><br></pre></td></tr></table></figure>\n\n<p>构建和部署的命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br><span class=\"line\">npm install --save-dev hexo-deployer-git</span><br><span class=\"line\">npm run deploy</span><br></pre></td></tr></table></figure>\n\n<p>因为build和deploy经常一起用，于是我将两个命令整合成一个，取名d：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"d\"</span>: <span class=\"string\">\"npm run clean &amp;&amp; npm run build &amp;&amp; npm run deploy\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就完成了博客的构建和上传。上传完之后需要注意下，Gitee Pages并不支持自动更新你上传的内容，你需要手动进到项目中的Pages服务，点击更新进行手动更新。<del>或许可以直接集成到d命令中，push完之后直接调用Pages的更新接口。这个等以后有时间了再来折腾下。</del>目前已经可以通过命令行触发Pages自动部署了，更多内容可以参加<a href=\"https://www.npmjs.com/package/gitee\" target=\"_blank\" rel=\"noopener\">gitee</a>这个npm模块。</p>\n","site":{"data":{}},"more":"<p>本文记录了使用Hexo创建静态博客的过程。我的需求是为了学习的内容找一个地方系统的记录下来，并且可以很方便的查看，但是又不想自己去购买服务器。另外写作的语言要求为Markdown。我首先想到的是使用Gitee Pages服务，免费且在国内访问速度还不错。下面就来一一介绍这整个的过程。</p>\n<h2 id=\"使用Gitee-Pages服务\"><a href=\"#使用Gitee-Pages服务\" class=\"headerlink\" title=\"使用Gitee Pages服务\"></a>使用Gitee Pages服务</h2><p>在Gitee上创建一个账号，然后在创建一个名称跟账号同名的仓库。同名的作用是为了在访问时不需要指定仓库名称。比如说我的账户名是<a href=\"https://gitee.com/lhtin\" target=\"_blank\" rel=\"noopener\">lhtin</a>，仓库名也为<a href=\"https://gitee.com/lhtin/lhtin\" target=\"_blank\" rel=\"noopener\">lhtin</a>，这样就可以直接通过 <a href=\"https://lhtin.gitee.io\">https://lhtin.gitee.io</a> 访问，而不需要加上仓库的名称作为访问的路径（ <a href=\"https://lhtin.gitee.io/lhtin\">https://lhtin.gitee.io/lhtin</a> ）。</p>\n<p>创建了仓库之后，就可以对仓库启动Pages服务了，具体设置方式请直接参考<a href=\"https://gitee.com/help/articles/4136\" target=\"_blank\" rel=\"noopener\">官方指南</a>。这样静态服务器就有了。</p>\n<h2 id=\"使用Hexo博客框架\"><a href=\"#使用Hexo博客框架\" class=\"headerlink\" title=\"使用Hexo博客框架\"></a>使用Hexo博客框架</h2><p>为了尽可能将时间花在写博客上面，我直接选择使用Hexo博客框架。这个框架非常灵活，除了基本的将Markdown编译为HTML能力之外，还提供了集中组织文章的方式。比如根据时间进行归档，根据标签和分类进行文章统计和检索。另外你也可以定义很多新的玩法，扩展性很好。下面介绍我的使用过程。</p>\n<h3 id=\"初始化博客项目\"><a href=\"#初始化博客项目\" class=\"headerlink\" title=\"初始化博客项目\"></a>初始化博客项目</h3><p>首先使用npm安装Hexo命令行工具，安装完之后初始化一个空的项目：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"></span><br><span class=\"line\">hexo init &lt;name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">cd &lt;name&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<p>执行完了之后，项目默认使用landscape主题。初始化的项目中有以下几个脚本命名可以使用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run server // 启动本地server</span><br><span class=\"line\">npm run build // 将项目打包成静态文件，存放在public目录</span><br><span class=\"line\">npm run deploy // 将public中的内容上传到指定的git仓库分支，需要在_config.yml中配置仓库信息，后面会介绍如何配置</span><br><span class=\"line\"></span><br><span class=\"line\">hexo new post hexo-guide // 根据scaffolds中的post模版生成文章的基本结构，会自动设置title和日期，生成的文件会存放在source/_posts中</span><br></pre></td></tr></table></figure>\n\n<p>更多指南请前往<a href=\"https://hexo.io/zh-cn/docs\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a>。</p>\n<h3 id=\"根据需要修改配置\"><a href=\"#根据需要修改配置\" class=\"headerlink\" title=\"根据需要修改配置\"></a>根据需要修改配置</h3><p>在初始化完了项目之后，我做了一些修改，以满足我的需求。首先定义网站的相关信息（更多配置说明请参见<a href=\"https://hexo.io/zh-cn/docs/configuration\" target=\"_blank\" rel=\"noopener\">官方文档-配置</a>）：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 项目根目录下的_config.yml文件</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"number\">01</span><span class=\"string\">的世界</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> <span class=\"string\">计算机的世界没有秘密</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">这里有关于计算机的方方面面</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span> <span class=\"number\">01</span><span class=\"string\">的世界</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">钉子哥</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span> <span class=\"comment\"># 会影响主题中的语言选择</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">Asia/Shanghai</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">//</span> <span class=\"string\">本博客部署的地址</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://lhtin.gitee.io</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/</span></span><br></pre></td></tr></table></figure>\n\n<p>然后还需要根据我自己的要求，修改默认主题<a href=\"https://github.com/hexojs/hexo-theme-landscape\" target=\"_blank\" rel=\"noopener\">landscape</a>的部分内容。所有修改的内容可以参见我fork出来的<a href=\"https://gitee.com/lhtin/hexo-theme-landscape\" target=\"_blank\" rel=\"noopener\">仓库</a>。这里我列出主要的修改：</p>\n<ul>\n<li>将一些英文翻译为中文，比如Home -&gt; 首页，Read More -&gt; 阅读全文</li>\n<li>去掉tagcloud，调整widgets的顺序，打开展示分类和标签中对应的文章数量的flag</li>\n<li>添加百度统计，并和Google统计合并到一个ejs文件</li>\n<li>去掉文章头部的日期和分类展示。让文章标题居中展示，并且在文章下面展示文章作者和日期</li>\n<li>去掉右上角的导航，固定展示为“首页”</li>\n<li>修改首页展示文章摘抄的样式</li>\n</ul>\n<h3 id=\"构建和部署\"><a href=\"#构建和部署\" class=\"headerlink\" title=\"构建和部署\"></a>构建和部署</h3><p>当你写好了一篇博客文章之后，就需要构建成静态文件，以便上传到Gitee Pages上。Hexo在构建时，是根据所选主题中对应的<a href=\"https://ejs.co\" target=\"_blank\" rel=\"noopener\">ejs模版</a>，填充所需参数（大部分来自yml文件和Markdown文件头部信息）和文章内容之后，就会生成HTML文件。</p>\n<p>生成HTML文件后，可以通过使用部署插件hexo-deployer-git，将生成的public目录中的文件自动上传到指定的git上，上传之前需要先在_config.yml中配置Git相关信息。</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 项目根目录下的_config.yml文件</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://gitee.com/lhtin/lhtin.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">page</span></span><br></pre></td></tr></table></figure>\n\n<p>构建和部署的命令如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br><span class=\"line\">npm install --save-dev hexo-deployer-git</span><br><span class=\"line\">npm run deploy</span><br></pre></td></tr></table></figure>\n\n<p>因为build和deploy经常一起用，于是我将两个命令整合成一个，取名d：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"d\"</span>: <span class=\"string\">\"npm run clean &amp;&amp; npm run build &amp;&amp; npm run deploy\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就完成了博客的构建和上传。上传完之后需要注意下，Gitee Pages并不支持自动更新你上传的内容，你需要手动进到项目中的Pages服务，点击更新进行手动更新。<del>或许可以直接集成到d命令中，push完之后直接调用Pages的更新接口。这个等以后有时间了再来折腾下。</del>目前已经可以通过命令行触发Pages自动部署了，更多内容可以参加<a href=\"https://www.npmjs.com/package/gitee\" target=\"_blank\" rel=\"noopener\">gitee</a>这个npm模块。</p>\n"},{"title":"学习LLVM第0篇：LLVM项目介绍","date":"2020-06-25T13:55:21.000Z","excerpt":"本文学习LLVM的第0篇文章，介绍LLVM项目的一些内容，包括如何构建命令行工具和本地文档、常用LLVM命令的使用。目的是为了后续研究LLVM作准备。","_content":"\n更全面的内容请直接参考[官方文档](https://llvm.org/docs)，这里仅列出我在学习LLVM时用到的一些编译命令及遇到的问题，还会有些文档中没有提到的内容。\n\n\n\n## 编译项目\n\n1. 安装[CMake](https://cmake.org)、[Ninja](https://ninja-build.org)构建工具。\n   \n   这里除了Ninja构建系统，其实也可以选择其他的，比如Unix Makefiles。其中CMake可以理解为给开发者使用的构建工具接口，至于实际的构建系统，开发者可以显式指定让CMake去使用，比如下面在生成实际的构建系统时，就用了Ninja（默认为Unix Makefiles）。\n   \n2. 克隆LLVM仓库：`git clone https://github.com/llvm/llvm-project`\n\n   如果国内clone太慢，也可以使用我在Gitee上创建的镜像仓库`https://gitee.com/github-repos/llvm-project`（注意：镜像仓库的内容可能会有延后，因为目前需要我手动点击同步）\n\n3. 创建构建目录，用于存放构建系统文件和构建出来的东西，比如在项目的根目录创建：`mkdir build`，然后进到构建目录： `cd build`\n\n4. 生成构建系统：`cmake -G Ninja -DLLVM_ENABLE_PROJECTS=\"clang;libcxx\" ../llvm`\n\n   常用参数：\n\n   - `LLVM_ENABLE_PROJECTS`：比如`\"clang;libcxx\"`。打算编译的项目列表，默认会编译LLVM，这里可以指定除LLVM之外的项目，比如`clang`、`clang-tools-extra`、`libcxx`、`libc`等。\n\n     小提示：所有支持的项目可以去看`llvm/CMakeLists.txt`文件中的`LLVM_ALL_PROJECTS`变量的内容。当前的内容为：`clang;clang-tools-extra;compiler-rt;debuginfo-tests;libc;libclc;libcxx;libcxxabi;libunwind;lld;lldb;mlir;openmp;parallel-libs;polly;pstl`\n\n   - `LLVM_TARGETS_TO_BUILD`：比如`\"X86;RISCV\"`。指定LLVM后端支持的目标架构，比如`X86`、`ARM`、`RISCV`、`WebAssembly`\n\n     小提示：所有支持的目标架构可以去看`llvm/CMakeLists.txt`文件中的`LLVM_ALL_TARGETS`变量的内容。当前的内容为：`AArch64;AMDGPU;ARM;AVR;BPF;Hexagon;Lanai;Mips;MSP430;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86;XCore`\n\n   - `LLVM_ENABLE_SPHINX`：是否编译LLVM文档。`ON`表示启动。依赖[Sphinx](https://www.sphinx-doc.org)\n\n   - `LLVM_ENABLE_DOXYGEN`：是否编译LLVM API文档。`ON`表示启动。依赖[Doxygen](https://www.doxygen.nl)\n\n5. 进行构建：\n\n   - `cmake --build .` 表示编译默认目标包括LLVM和`LLVM_ENABLE_PROJECTS`指定的项目\n\n   - `cmake --build . --target docs-llvm-html` 表示只编译LLVM文档\n\n     小提示：一开始我用的最新的3.1.1的Sphinx，运行这条命令会报错，在master分支上编译会提示：`llvm/docs/TableGen/LangRef.rst:270:duplicate token description of SimpleValue, other instance in TableGen/LangRef`，这是一个警告，但是因为编译的时候指定了`-W`，会将警告当作错误来对待，所以会直接退出。如果使用官方文档所用的Sphinx版本1.8.5（从文档的右下角可以看到），则会报`llvm/docs/CommandGuide/llvm-dwarfdump.rst:40:unknown option: --debug-info`。目前我的解决办法是去掉`-W`之后单独执行：`sphinx-build -b html -d docs/_doctrees-llvm-html -q ../llvm/docs docs/html`。不过打开生成的文档发现样式有点问题，每个文档的标题下面是一大块空白的，是CSS写的有问题。\n\n     更新（2020-06-26）：后面又试了下，如果去当前最新的release/10.x分支，使用Sphinx 1.8.5编译，则可以编译通过。所以需要编译Sphinx文档，建议使用1.8.5版本的Sphinx，并且编译的是release/10.x分支。\n\n   - `cmake --build . --target doxygen-llvm` 表示只编译LLVM API文档，试了下发现编译需要非常长的时间，做好心理准备。官方用的Doxygen版本是1.8.13，我用的1.8.18编译目前没有发现问题。\n   \n   小提示：1. 想要查看有哪些target可以去查看生成的`build/CMakeFiles/TargetDirectories.txt`文件。像这里的`doxygen-llvm`我就是通过这种方式找到的，文档上一直没有找到。2. 通过在本地编译文档，可以很方便后面学习LLVM时使用，在线的文档没有本地文档访问快。并且也可以添加一些中文注解，方便理解。\n\n将前面的命令放在一起方便拷贝：\n\n```shell\ngit clone https://github.com/llvm/llvm-project\n// Gitee源：git clone https://gitee.com/github-repos/llvm-project\ncd llvm-project && mkdir build && cd build\ncmake -G Ninja\\\n  -DLLVM_ENABLE_PROJECTS=\"clang;libcxx\"\\\n  -DLLVM_TARGETS_TO_BUILD=\"X86\"\\\n  -DLLVM_ENABLE_SPHINX=ON\\\n  -DLLVM_ENABLE_DOXYGEN=ON\\\n  ../llvm\ncmake --build . // 编译llvm、clang、libcxx\ncmake --build . --target docs-llvm-html // 编译LLVM文档\ncmake --build . --target doxygen-llvm // 编译LLVM API文档\n```\n\n官方文档参考：\n\n- [Getting Started with the LLVM System](https://llvm.org/docs/GettingStarted.html)：介绍了编译项目的基本步骤，常用参数\n- [Building LLVM with CMake](https://llvm.org/docs/CMake.html)：更详细的介绍了CMake构建系统，包括CMake的基本使用和所有支持的参数\n\n\n\n## 常用LLVM命令\n\n- clang\n  - `clang -S -emit-llvm input.c -o out.ll`：生成人可读的LLVM IR\n  - `clang -c -emit-llvm input.c -o out.bc`：生成二进制LLVM IR，也可以不加`-c`，默认编译为二进制IR\n- [opt](https://llvm.org/docs/CommandGuide/opt.html)\n  - `opt -load-pass-plugin=libHelloWorld.dylib -passes=\"hello-world\" a.ll`：使用HelloWorld Pass对`out.ll`进行处理。注意这是新的单独调用Pass的方式，老的方式为：`opt -load libHelloWorld.dylib -legacy-hello-world a.ll`\n  - `opt -analyze -view-cfg a.ll` 生成控制流程图（Control-flow graph），可以很方便的查看函数中的各种BB及BB直接的跳转。\n- [llvm-as](https://llvm.org/docs/CommandGuide/llvm-as.html)、[llvm-dis](https://llvm.org/docs/CommandGuide/llvm-dis.html)\n  - `llvm-as a.ll -o a.bc`：将人可读的LLVM IR编译为二进制LLVM IR\n  - `llvm-dis a.bc -o a.ll`：将二进制LLVM IR反编译为人可读的LLVM IR\n- [llc](https://llvm.org/docs/CommandGuide/llc.html)\n  - `llc a.ll -o a.out`：将LLVM IR编译为汇编代码，进而可以使用原生汇编器编译为可执行文件\n- [lli](https://llvm.org/docs/CommandGuide/lli.html)\n  - `lli a.ll`：直接解释执行LLVM IR\n- [llvm-link](https://llvm.org/docs/CommandGuide/llvm-link.html)\n  - `llvm-link -S add.ll main.ll -o all.ll`：链接多个LLVM IR为一个LLVM IR文件，`-S`表示输出的为人可读的LLVM IR，默认为二进制LLVM IR\n- [llvm-config](https://llvm.org/docs/CommandGuide/llvm-config.html)：使用`llvm-config --help`查看帮助。给依赖LLVM的项目提供支持，输出LLVM库的头文件地址、库文件地址、库列表。\n  - `llvm-config --cxxflags`：生成编译时的头文件库参数，比如在我电脑上会输出`-I/usr/local/Cellar/llvm/10.0.0_3/include -std=c++14 -stdlib=libc++  -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS`\n  - `llvm-config --ldflags`：生成链接时的LLVM库文件地址，比如在我电脑上会输出`-L/usr/local/Cellar/llvm/10.0.0_3/lib -Wl,-search_paths_first -Wl,-headerpad_max_install_names`\n  - `llvm-config --libs`：生成LLVM提供的库名称，结合`llvm-config --ldflags`，就可以让链接器找到对应的库文件。在`--libs`后面还可以添加各种组件名称，不添加表示所有组件。比如`--libs core native`，则只会输出core和native组件相关的库。通过下面的`llvm-config --components`命令可以列举出所有的LLVM组件列表\n  - `llvm-config --components`：输出所有的LLVM组件\n\n官方文档参考：\n\n- [LLVM Command Guide](https://llvm.org/docs/CommandGuide/index.html)：命令行工具使用说明\n\n\n<!--\n## LLVM项目结构简介\n\n// TODO\n-->","source":"_posts/llvm-0.md","raw":"---\ntitle: 学习LLVM第0篇：LLVM项目介绍\ndate: 2020-06-25 21:55:21\ncategories:\n- llvm\ntags:\n- llvm\nexcerpt: 本文学习LLVM的第0篇文章，介绍LLVM项目的一些内容，包括如何构建命令行工具和本地文档、常用LLVM命令的使用。目的是为了后续研究LLVM作准备。\n---\n\n更全面的内容请直接参考[官方文档](https://llvm.org/docs)，这里仅列出我在学习LLVM时用到的一些编译命令及遇到的问题，还会有些文档中没有提到的内容。\n\n\n\n## 编译项目\n\n1. 安装[CMake](https://cmake.org)、[Ninja](https://ninja-build.org)构建工具。\n   \n   这里除了Ninja构建系统，其实也可以选择其他的，比如Unix Makefiles。其中CMake可以理解为给开发者使用的构建工具接口，至于实际的构建系统，开发者可以显式指定让CMake去使用，比如下面在生成实际的构建系统时，就用了Ninja（默认为Unix Makefiles）。\n   \n2. 克隆LLVM仓库：`git clone https://github.com/llvm/llvm-project`\n\n   如果国内clone太慢，也可以使用我在Gitee上创建的镜像仓库`https://gitee.com/github-repos/llvm-project`（注意：镜像仓库的内容可能会有延后，因为目前需要我手动点击同步）\n\n3. 创建构建目录，用于存放构建系统文件和构建出来的东西，比如在项目的根目录创建：`mkdir build`，然后进到构建目录： `cd build`\n\n4. 生成构建系统：`cmake -G Ninja -DLLVM_ENABLE_PROJECTS=\"clang;libcxx\" ../llvm`\n\n   常用参数：\n\n   - `LLVM_ENABLE_PROJECTS`：比如`\"clang;libcxx\"`。打算编译的项目列表，默认会编译LLVM，这里可以指定除LLVM之外的项目，比如`clang`、`clang-tools-extra`、`libcxx`、`libc`等。\n\n     小提示：所有支持的项目可以去看`llvm/CMakeLists.txt`文件中的`LLVM_ALL_PROJECTS`变量的内容。当前的内容为：`clang;clang-tools-extra;compiler-rt;debuginfo-tests;libc;libclc;libcxx;libcxxabi;libunwind;lld;lldb;mlir;openmp;parallel-libs;polly;pstl`\n\n   - `LLVM_TARGETS_TO_BUILD`：比如`\"X86;RISCV\"`。指定LLVM后端支持的目标架构，比如`X86`、`ARM`、`RISCV`、`WebAssembly`\n\n     小提示：所有支持的目标架构可以去看`llvm/CMakeLists.txt`文件中的`LLVM_ALL_TARGETS`变量的内容。当前的内容为：`AArch64;AMDGPU;ARM;AVR;BPF;Hexagon;Lanai;Mips;MSP430;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86;XCore`\n\n   - `LLVM_ENABLE_SPHINX`：是否编译LLVM文档。`ON`表示启动。依赖[Sphinx](https://www.sphinx-doc.org)\n\n   - `LLVM_ENABLE_DOXYGEN`：是否编译LLVM API文档。`ON`表示启动。依赖[Doxygen](https://www.doxygen.nl)\n\n5. 进行构建：\n\n   - `cmake --build .` 表示编译默认目标包括LLVM和`LLVM_ENABLE_PROJECTS`指定的项目\n\n   - `cmake --build . --target docs-llvm-html` 表示只编译LLVM文档\n\n     小提示：一开始我用的最新的3.1.1的Sphinx，运行这条命令会报错，在master分支上编译会提示：`llvm/docs/TableGen/LangRef.rst:270:duplicate token description of SimpleValue, other instance in TableGen/LangRef`，这是一个警告，但是因为编译的时候指定了`-W`，会将警告当作错误来对待，所以会直接退出。如果使用官方文档所用的Sphinx版本1.8.5（从文档的右下角可以看到），则会报`llvm/docs/CommandGuide/llvm-dwarfdump.rst:40:unknown option: --debug-info`。目前我的解决办法是去掉`-W`之后单独执行：`sphinx-build -b html -d docs/_doctrees-llvm-html -q ../llvm/docs docs/html`。不过打开生成的文档发现样式有点问题，每个文档的标题下面是一大块空白的，是CSS写的有问题。\n\n     更新（2020-06-26）：后面又试了下，如果去当前最新的release/10.x分支，使用Sphinx 1.8.5编译，则可以编译通过。所以需要编译Sphinx文档，建议使用1.8.5版本的Sphinx，并且编译的是release/10.x分支。\n\n   - `cmake --build . --target doxygen-llvm` 表示只编译LLVM API文档，试了下发现编译需要非常长的时间，做好心理准备。官方用的Doxygen版本是1.8.13，我用的1.8.18编译目前没有发现问题。\n   \n   小提示：1. 想要查看有哪些target可以去查看生成的`build/CMakeFiles/TargetDirectories.txt`文件。像这里的`doxygen-llvm`我就是通过这种方式找到的，文档上一直没有找到。2. 通过在本地编译文档，可以很方便后面学习LLVM时使用，在线的文档没有本地文档访问快。并且也可以添加一些中文注解，方便理解。\n\n将前面的命令放在一起方便拷贝：\n\n```shell\ngit clone https://github.com/llvm/llvm-project\n// Gitee源：git clone https://gitee.com/github-repos/llvm-project\ncd llvm-project && mkdir build && cd build\ncmake -G Ninja\\\n  -DLLVM_ENABLE_PROJECTS=\"clang;libcxx\"\\\n  -DLLVM_TARGETS_TO_BUILD=\"X86\"\\\n  -DLLVM_ENABLE_SPHINX=ON\\\n  -DLLVM_ENABLE_DOXYGEN=ON\\\n  ../llvm\ncmake --build . // 编译llvm、clang、libcxx\ncmake --build . --target docs-llvm-html // 编译LLVM文档\ncmake --build . --target doxygen-llvm // 编译LLVM API文档\n```\n\n官方文档参考：\n\n- [Getting Started with the LLVM System](https://llvm.org/docs/GettingStarted.html)：介绍了编译项目的基本步骤，常用参数\n- [Building LLVM with CMake](https://llvm.org/docs/CMake.html)：更详细的介绍了CMake构建系统，包括CMake的基本使用和所有支持的参数\n\n\n\n## 常用LLVM命令\n\n- clang\n  - `clang -S -emit-llvm input.c -o out.ll`：生成人可读的LLVM IR\n  - `clang -c -emit-llvm input.c -o out.bc`：生成二进制LLVM IR，也可以不加`-c`，默认编译为二进制IR\n- [opt](https://llvm.org/docs/CommandGuide/opt.html)\n  - `opt -load-pass-plugin=libHelloWorld.dylib -passes=\"hello-world\" a.ll`：使用HelloWorld Pass对`out.ll`进行处理。注意这是新的单独调用Pass的方式，老的方式为：`opt -load libHelloWorld.dylib -legacy-hello-world a.ll`\n  - `opt -analyze -view-cfg a.ll` 生成控制流程图（Control-flow graph），可以很方便的查看函数中的各种BB及BB直接的跳转。\n- [llvm-as](https://llvm.org/docs/CommandGuide/llvm-as.html)、[llvm-dis](https://llvm.org/docs/CommandGuide/llvm-dis.html)\n  - `llvm-as a.ll -o a.bc`：将人可读的LLVM IR编译为二进制LLVM IR\n  - `llvm-dis a.bc -o a.ll`：将二进制LLVM IR反编译为人可读的LLVM IR\n- [llc](https://llvm.org/docs/CommandGuide/llc.html)\n  - `llc a.ll -o a.out`：将LLVM IR编译为汇编代码，进而可以使用原生汇编器编译为可执行文件\n- [lli](https://llvm.org/docs/CommandGuide/lli.html)\n  - `lli a.ll`：直接解释执行LLVM IR\n- [llvm-link](https://llvm.org/docs/CommandGuide/llvm-link.html)\n  - `llvm-link -S add.ll main.ll -o all.ll`：链接多个LLVM IR为一个LLVM IR文件，`-S`表示输出的为人可读的LLVM IR，默认为二进制LLVM IR\n- [llvm-config](https://llvm.org/docs/CommandGuide/llvm-config.html)：使用`llvm-config --help`查看帮助。给依赖LLVM的项目提供支持，输出LLVM库的头文件地址、库文件地址、库列表。\n  - `llvm-config --cxxflags`：生成编译时的头文件库参数，比如在我电脑上会输出`-I/usr/local/Cellar/llvm/10.0.0_3/include -std=c++14 -stdlib=libc++  -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS`\n  - `llvm-config --ldflags`：生成链接时的LLVM库文件地址，比如在我电脑上会输出`-L/usr/local/Cellar/llvm/10.0.0_3/lib -Wl,-search_paths_first -Wl,-headerpad_max_install_names`\n  - `llvm-config --libs`：生成LLVM提供的库名称，结合`llvm-config --ldflags`，就可以让链接器找到对应的库文件。在`--libs`后面还可以添加各种组件名称，不添加表示所有组件。比如`--libs core native`，则只会输出core和native组件相关的库。通过下面的`llvm-config --components`命令可以列举出所有的LLVM组件列表\n  - `llvm-config --components`：输出所有的LLVM组件\n\n官方文档参考：\n\n- [LLVM Command Guide](https://llvm.org/docs/CommandGuide/index.html)：命令行工具使用说明\n\n\n<!--\n## LLVM项目结构简介\n\n// TODO\n-->","slug":"llvm-0","published":1,"updated":"2020-06-30T02:59:20.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckc1clp1e0004acjkhyjo35l7","content":"<p>更全面的内容请直接参考<a href=\"https://llvm.org/docs\" target=\"_blank\" rel=\"noopener\">官方文档</a>，这里仅列出我在学习LLVM时用到的一些编译命令及遇到的问题，还会有些文档中没有提到的内容。</p>\n<h2 id=\"编译项目\"><a href=\"#编译项目\" class=\"headerlink\" title=\"编译项目\"></a>编译项目</h2><ol>\n<li><p>安装<a href=\"https://cmake.org\" target=\"_blank\" rel=\"noopener\">CMake</a>、<a href=\"https://ninja-build.org\" target=\"_blank\" rel=\"noopener\">Ninja</a>构建工具。</p>\n<p>这里除了Ninja构建系统，其实也可以选择其他的，比如Unix Makefiles。其中CMake可以理解为给开发者使用的构建工具接口，至于实际的构建系统，开发者可以显式指定让CMake去使用，比如下面在生成实际的构建系统时，就用了Ninja（默认为Unix Makefiles）。</p>\n</li>\n<li><p>克隆LLVM仓库：<code>git clone https://github.com/llvm/llvm-project</code></p>\n<p>如果国内clone太慢，也可以使用我在Gitee上创建的镜像仓库<code>https://gitee.com/github-repos/llvm-project</code>（注意：镜像仓库的内容可能会有延后，因为目前需要我手动点击同步）</p>\n</li>\n<li><p>创建构建目录，用于存放构建系统文件和构建出来的东西，比如在项目的根目录创建：<code>mkdir build</code>，然后进到构建目录： <code>cd build</code></p>\n</li>\n<li><p>生成构建系统：<code>cmake -G Ninja -DLLVM_ENABLE_PROJECTS=&quot;clang;libcxx&quot; ../llvm</code></p>\n<p>常用参数：</p>\n<ul>\n<li><p><code>LLVM_ENABLE_PROJECTS</code>：比如<code>&quot;clang;libcxx&quot;</code>。打算编译的项目列表，默认会编译LLVM，这里可以指定除LLVM之外的项目，比如<code>clang</code>、<code>clang-tools-extra</code>、<code>libcxx</code>、<code>libc</code>等。</p>\n<p>小提示：所有支持的项目可以去看<code>llvm/CMakeLists.txt</code>文件中的<code>LLVM_ALL_PROJECTS</code>变量的内容。当前的内容为：<code>clang;clang-tools-extra;compiler-rt;debuginfo-tests;libc;libclc;libcxx;libcxxabi;libunwind;lld;lldb;mlir;openmp;parallel-libs;polly;pstl</code></p>\n</li>\n<li><p><code>LLVM_TARGETS_TO_BUILD</code>：比如<code>&quot;X86;RISCV&quot;</code>。指定LLVM后端支持的目标架构，比如<code>X86</code>、<code>ARM</code>、<code>RISCV</code>、<code>WebAssembly</code></p>\n<p>小提示：所有支持的目标架构可以去看<code>llvm/CMakeLists.txt</code>文件中的<code>LLVM_ALL_TARGETS</code>变量的内容。当前的内容为：<code>AArch64;AMDGPU;ARM;AVR;BPF;Hexagon;Lanai;Mips;MSP430;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86;XCore</code></p>\n</li>\n<li><p><code>LLVM_ENABLE_SPHINX</code>：是否编译LLVM文档。<code>ON</code>表示启动。依赖<a href=\"https://www.sphinx-doc.org\" target=\"_blank\" rel=\"noopener\">Sphinx</a></p>\n</li>\n<li><p><code>LLVM_ENABLE_DOXYGEN</code>：是否编译LLVM API文档。<code>ON</code>表示启动。依赖<a href=\"https://www.doxygen.nl\" target=\"_blank\" rel=\"noopener\">Doxygen</a></p>\n</li>\n</ul>\n</li>\n<li><p>进行构建：</p>\n<ul>\n<li><p><code>cmake --build .</code> 表示编译默认目标包括LLVM和<code>LLVM_ENABLE_PROJECTS</code>指定的项目</p>\n</li>\n<li><p><code>cmake --build . --target docs-llvm-html</code> 表示只编译LLVM文档</p>\n<p>小提示：一开始我用的最新的3.1.1的Sphinx，运行这条命令会报错，在master分支上编译会提示：<code>llvm/docs/TableGen/LangRef.rst:270:duplicate token description of SimpleValue, other instance in TableGen/LangRef</code>，这是一个警告，但是因为编译的时候指定了<code>-W</code>，会将警告当作错误来对待，所以会直接退出。如果使用官方文档所用的Sphinx版本1.8.5（从文档的右下角可以看到），则会报<code>llvm/docs/CommandGuide/llvm-dwarfdump.rst:40:unknown option: --debug-info</code>。目前我的解决办法是去掉<code>-W</code>之后单独执行：<code>sphinx-build -b html -d docs/_doctrees-llvm-html -q ../llvm/docs docs/html</code>。不过打开生成的文档发现样式有点问题，每个文档的标题下面是一大块空白的，是CSS写的有问题。</p>\n<p>更新（2020-06-26）：后面又试了下，如果去当前最新的release/10.x分支，使用Sphinx 1.8.5编译，则可以编译通过。所以需要编译Sphinx文档，建议使用1.8.5版本的Sphinx，并且编译的是release/10.x分支。</p>\n</li>\n<li><p><code>cmake --build . --target doxygen-llvm</code> 表示只编译LLVM API文档，试了下发现编译需要非常长的时间，做好心理准备。官方用的Doxygen版本是1.8.13，我用的1.8.18编译目前没有发现问题。</p>\n</li>\n</ul>\n<p>小提示：1. 想要查看有哪些target可以去查看生成的<code>build/CMakeFiles/TargetDirectories.txt</code>文件。像这里的<code>doxygen-llvm</code>我就是通过这种方式找到的，文档上一直没有找到。2. 通过在本地编译文档，可以很方便后面学习LLVM时使用，在线的文档没有本地文档访问快。并且也可以添加一些中文注解，方便理解。</p>\n</li>\n</ol>\n<p>将前面的命令放在一起方便拷贝：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/llvm/llvm-project</span><br><span class=\"line\">// Gitee源：git clone https://gitee.com/github-repos/llvm-project</span><br><span class=\"line\">cd llvm-project &amp;&amp; mkdir build &amp;&amp; cd build</span><br><span class=\"line\">cmake -G Ninja\\</span><br><span class=\"line\">  -DLLVM_ENABLE_PROJECTS=\"clang;libcxx\"\\</span><br><span class=\"line\">  -DLLVM_TARGETS_TO_BUILD=\"X86\"\\</span><br><span class=\"line\">  -DLLVM_ENABLE_SPHINX=ON\\</span><br><span class=\"line\">  -DLLVM_ENABLE_DOXYGEN=ON\\</span><br><span class=\"line\">  ../llvm</span><br><span class=\"line\">cmake --build . // 编译llvm、clang、libcxx</span><br><span class=\"line\">cmake --build . --target docs-llvm-html // 编译LLVM文档</span><br><span class=\"line\">cmake --build . --target doxygen-llvm // 编译LLVM API文档</span><br></pre></td></tr></table></figure>\n\n<p>官方文档参考：</p>\n<ul>\n<li><a href=\"https://llvm.org/docs/GettingStarted.html\" target=\"_blank\" rel=\"noopener\">Getting Started with the LLVM System</a>：介绍了编译项目的基本步骤，常用参数</li>\n<li><a href=\"https://llvm.org/docs/CMake.html\" target=\"_blank\" rel=\"noopener\">Building LLVM with CMake</a>：更详细的介绍了CMake构建系统，包括CMake的基本使用和所有支持的参数</li>\n</ul>\n<h2 id=\"常用LLVM命令\"><a href=\"#常用LLVM命令\" class=\"headerlink\" title=\"常用LLVM命令\"></a>常用LLVM命令</h2><ul>\n<li>clang<ul>\n<li><code>clang -S -emit-llvm input.c -o out.ll</code>：生成人可读的LLVM IR</li>\n<li><code>clang -c -emit-llvm input.c -o out.bc</code>：生成二进制LLVM IR，也可以不加<code>-c</code>，默认编译为二进制IR</li>\n</ul>\n</li>\n<li><a href=\"https://llvm.org/docs/CommandGuide/opt.html\" target=\"_blank\" rel=\"noopener\">opt</a><ul>\n<li><code>opt -load-pass-plugin=libHelloWorld.dylib -passes=&quot;hello-world&quot; a.ll</code>：使用HelloWorld Pass对<code>out.ll</code>进行处理。注意这是新的单独调用Pass的方式，老的方式为：<code>opt -load libHelloWorld.dylib -legacy-hello-world a.ll</code></li>\n<li><code>opt -analyze -view-cfg a.ll</code> 生成控制流程图（Control-flow graph），可以很方便的查看函数中的各种BB及BB直接的跳转。</li>\n</ul>\n</li>\n<li><a href=\"https://llvm.org/docs/CommandGuide/llvm-as.html\" target=\"_blank\" rel=\"noopener\">llvm-as</a>、<a href=\"https://llvm.org/docs/CommandGuide/llvm-dis.html\" target=\"_blank\" rel=\"noopener\">llvm-dis</a><ul>\n<li><code>llvm-as a.ll -o a.bc</code>：将人可读的LLVM IR编译为二进制LLVM IR</li>\n<li><code>llvm-dis a.bc -o a.ll</code>：将二进制LLVM IR反编译为人可读的LLVM IR</li>\n</ul>\n</li>\n<li><a href=\"https://llvm.org/docs/CommandGuide/llc.html\" target=\"_blank\" rel=\"noopener\">llc</a><ul>\n<li><code>llc a.ll -o a.out</code>：将LLVM IR编译为汇编代码，进而可以使用原生汇编器编译为可执行文件</li>\n</ul>\n</li>\n<li><a href=\"https://llvm.org/docs/CommandGuide/lli.html\" target=\"_blank\" rel=\"noopener\">lli</a><ul>\n<li><code>lli a.ll</code>：直接解释执行LLVM IR</li>\n</ul>\n</li>\n<li><a href=\"https://llvm.org/docs/CommandGuide/llvm-link.html\" target=\"_blank\" rel=\"noopener\">llvm-link</a><ul>\n<li><code>llvm-link -S add.ll main.ll -o all.ll</code>：链接多个LLVM IR为一个LLVM IR文件，<code>-S</code>表示输出的为人可读的LLVM IR，默认为二进制LLVM IR</li>\n</ul>\n</li>\n<li><a href=\"https://llvm.org/docs/CommandGuide/llvm-config.html\" target=\"_blank\" rel=\"noopener\">llvm-config</a>：使用<code>llvm-config --help</code>查看帮助。给依赖LLVM的项目提供支持，输出LLVM库的头文件地址、库文件地址、库列表。<ul>\n<li><code>llvm-config --cxxflags</code>：生成编译时的头文件库参数，比如在我电脑上会输出<code>-I/usr/local/Cellar/llvm/10.0.0_3/include -std=c++14 -stdlib=libc++  -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS</code></li>\n<li><code>llvm-config --ldflags</code>：生成链接时的LLVM库文件地址，比如在我电脑上会输出<code>-L/usr/local/Cellar/llvm/10.0.0_3/lib -Wl,-search_paths_first -Wl,-headerpad_max_install_names</code></li>\n<li><code>llvm-config --libs</code>：生成LLVM提供的库名称，结合<code>llvm-config --ldflags</code>，就可以让链接器找到对应的库文件。在<code>--libs</code>后面还可以添加各种组件名称，不添加表示所有组件。比如<code>--libs core native</code>，则只会输出core和native组件相关的库。通过下面的<code>llvm-config --components</code>命令可以列举出所有的LLVM组件列表</li>\n<li><code>llvm-config --components</code>：输出所有的LLVM组件</li>\n</ul>\n</li>\n</ul>\n<p>官方文档参考：</p>\n<ul>\n<li><a href=\"https://llvm.org/docs/CommandGuide/index.html\" target=\"_blank\" rel=\"noopener\">LLVM Command Guide</a>：命令行工具使用说明</li>\n</ul>\n<!--\n## LLVM项目结构简介\n\n// TODO\n-->","site":{"data":{}},"more":"<p>更全面的内容请直接参考<a href=\"https://llvm.org/docs\" target=\"_blank\" rel=\"noopener\">官方文档</a>，这里仅列出我在学习LLVM时用到的一些编译命令及遇到的问题，还会有些文档中没有提到的内容。</p>\n<h2 id=\"编译项目\"><a href=\"#编译项目\" class=\"headerlink\" title=\"编译项目\"></a>编译项目</h2><ol>\n<li><p>安装<a href=\"https://cmake.org\" target=\"_blank\" rel=\"noopener\">CMake</a>、<a href=\"https://ninja-build.org\" target=\"_blank\" rel=\"noopener\">Ninja</a>构建工具。</p>\n<p>这里除了Ninja构建系统，其实也可以选择其他的，比如Unix Makefiles。其中CMake可以理解为给开发者使用的构建工具接口，至于实际的构建系统，开发者可以显式指定让CMake去使用，比如下面在生成实际的构建系统时，就用了Ninja（默认为Unix Makefiles）。</p>\n</li>\n<li><p>克隆LLVM仓库：<code>git clone https://github.com/llvm/llvm-project</code></p>\n<p>如果国内clone太慢，也可以使用我在Gitee上创建的镜像仓库<code>https://gitee.com/github-repos/llvm-project</code>（注意：镜像仓库的内容可能会有延后，因为目前需要我手动点击同步）</p>\n</li>\n<li><p>创建构建目录，用于存放构建系统文件和构建出来的东西，比如在项目的根目录创建：<code>mkdir build</code>，然后进到构建目录： <code>cd build</code></p>\n</li>\n<li><p>生成构建系统：<code>cmake -G Ninja -DLLVM_ENABLE_PROJECTS=&quot;clang;libcxx&quot; ../llvm</code></p>\n<p>常用参数：</p>\n<ul>\n<li><p><code>LLVM_ENABLE_PROJECTS</code>：比如<code>&quot;clang;libcxx&quot;</code>。打算编译的项目列表，默认会编译LLVM，这里可以指定除LLVM之外的项目，比如<code>clang</code>、<code>clang-tools-extra</code>、<code>libcxx</code>、<code>libc</code>等。</p>\n<p>小提示：所有支持的项目可以去看<code>llvm/CMakeLists.txt</code>文件中的<code>LLVM_ALL_PROJECTS</code>变量的内容。当前的内容为：<code>clang;clang-tools-extra;compiler-rt;debuginfo-tests;libc;libclc;libcxx;libcxxabi;libunwind;lld;lldb;mlir;openmp;parallel-libs;polly;pstl</code></p>\n</li>\n<li><p><code>LLVM_TARGETS_TO_BUILD</code>：比如<code>&quot;X86;RISCV&quot;</code>。指定LLVM后端支持的目标架构，比如<code>X86</code>、<code>ARM</code>、<code>RISCV</code>、<code>WebAssembly</code></p>\n<p>小提示：所有支持的目标架构可以去看<code>llvm/CMakeLists.txt</code>文件中的<code>LLVM_ALL_TARGETS</code>变量的内容。当前的内容为：<code>AArch64;AMDGPU;ARM;AVR;BPF;Hexagon;Lanai;Mips;MSP430;NVPTX;PowerPC;RISCV;Sparc;SystemZ;WebAssembly;X86;XCore</code></p>\n</li>\n<li><p><code>LLVM_ENABLE_SPHINX</code>：是否编译LLVM文档。<code>ON</code>表示启动。依赖<a href=\"https://www.sphinx-doc.org\" target=\"_blank\" rel=\"noopener\">Sphinx</a></p>\n</li>\n<li><p><code>LLVM_ENABLE_DOXYGEN</code>：是否编译LLVM API文档。<code>ON</code>表示启动。依赖<a href=\"https://www.doxygen.nl\" target=\"_blank\" rel=\"noopener\">Doxygen</a></p>\n</li>\n</ul>\n</li>\n<li><p>进行构建：</p>\n<ul>\n<li><p><code>cmake --build .</code> 表示编译默认目标包括LLVM和<code>LLVM_ENABLE_PROJECTS</code>指定的项目</p>\n</li>\n<li><p><code>cmake --build . --target docs-llvm-html</code> 表示只编译LLVM文档</p>\n<p>小提示：一开始我用的最新的3.1.1的Sphinx，运行这条命令会报错，在master分支上编译会提示：<code>llvm/docs/TableGen/LangRef.rst:270:duplicate token description of SimpleValue, other instance in TableGen/LangRef</code>，这是一个警告，但是因为编译的时候指定了<code>-W</code>，会将警告当作错误来对待，所以会直接退出。如果使用官方文档所用的Sphinx版本1.8.5（从文档的右下角可以看到），则会报<code>llvm/docs/CommandGuide/llvm-dwarfdump.rst:40:unknown option: --debug-info</code>。目前我的解决办法是去掉<code>-W</code>之后单独执行：<code>sphinx-build -b html -d docs/_doctrees-llvm-html -q ../llvm/docs docs/html</code>。不过打开生成的文档发现样式有点问题，每个文档的标题下面是一大块空白的，是CSS写的有问题。</p>\n<p>更新（2020-06-26）：后面又试了下，如果去当前最新的release/10.x分支，使用Sphinx 1.8.5编译，则可以编译通过。所以需要编译Sphinx文档，建议使用1.8.5版本的Sphinx，并且编译的是release/10.x分支。</p>\n</li>\n<li><p><code>cmake --build . --target doxygen-llvm</code> 表示只编译LLVM API文档，试了下发现编译需要非常长的时间，做好心理准备。官方用的Doxygen版本是1.8.13，我用的1.8.18编译目前没有发现问题。</p>\n</li>\n</ul>\n<p>小提示：1. 想要查看有哪些target可以去查看生成的<code>build/CMakeFiles/TargetDirectories.txt</code>文件。像这里的<code>doxygen-llvm</code>我就是通过这种方式找到的，文档上一直没有找到。2. 通过在本地编译文档，可以很方便后面学习LLVM时使用，在线的文档没有本地文档访问快。并且也可以添加一些中文注解，方便理解。</p>\n</li>\n</ol>\n<p>将前面的命令放在一起方便拷贝：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/llvm/llvm-project</span><br><span class=\"line\">// Gitee源：git clone https://gitee.com/github-repos/llvm-project</span><br><span class=\"line\">cd llvm-project &amp;&amp; mkdir build &amp;&amp; cd build</span><br><span class=\"line\">cmake -G Ninja\\</span><br><span class=\"line\">  -DLLVM_ENABLE_PROJECTS=\"clang;libcxx\"\\</span><br><span class=\"line\">  -DLLVM_TARGETS_TO_BUILD=\"X86\"\\</span><br><span class=\"line\">  -DLLVM_ENABLE_SPHINX=ON\\</span><br><span class=\"line\">  -DLLVM_ENABLE_DOXYGEN=ON\\</span><br><span class=\"line\">  ../llvm</span><br><span class=\"line\">cmake --build . // 编译llvm、clang、libcxx</span><br><span class=\"line\">cmake --build . --target docs-llvm-html // 编译LLVM文档</span><br><span class=\"line\">cmake --build . --target doxygen-llvm // 编译LLVM API文档</span><br></pre></td></tr></table></figure>\n\n<p>官方文档参考：</p>\n<ul>\n<li><a href=\"https://llvm.org/docs/GettingStarted.html\" target=\"_blank\" rel=\"noopener\">Getting Started with the LLVM System</a>：介绍了编译项目的基本步骤，常用参数</li>\n<li><a href=\"https://llvm.org/docs/CMake.html\" target=\"_blank\" rel=\"noopener\">Building LLVM with CMake</a>：更详细的介绍了CMake构建系统，包括CMake的基本使用和所有支持的参数</li>\n</ul>\n<h2 id=\"常用LLVM命令\"><a href=\"#常用LLVM命令\" class=\"headerlink\" title=\"常用LLVM命令\"></a>常用LLVM命令</h2><ul>\n<li>clang<ul>\n<li><code>clang -S -emit-llvm input.c -o out.ll</code>：生成人可读的LLVM IR</li>\n<li><code>clang -c -emit-llvm input.c -o out.bc</code>：生成二进制LLVM IR，也可以不加<code>-c</code>，默认编译为二进制IR</li>\n</ul>\n</li>\n<li><a href=\"https://llvm.org/docs/CommandGuide/opt.html\" target=\"_blank\" rel=\"noopener\">opt</a><ul>\n<li><code>opt -load-pass-plugin=libHelloWorld.dylib -passes=&quot;hello-world&quot; a.ll</code>：使用HelloWorld Pass对<code>out.ll</code>进行处理。注意这是新的单独调用Pass的方式，老的方式为：<code>opt -load libHelloWorld.dylib -legacy-hello-world a.ll</code></li>\n<li><code>opt -analyze -view-cfg a.ll</code> 生成控制流程图（Control-flow graph），可以很方便的查看函数中的各种BB及BB直接的跳转。</li>\n</ul>\n</li>\n<li><a href=\"https://llvm.org/docs/CommandGuide/llvm-as.html\" target=\"_blank\" rel=\"noopener\">llvm-as</a>、<a href=\"https://llvm.org/docs/CommandGuide/llvm-dis.html\" target=\"_blank\" rel=\"noopener\">llvm-dis</a><ul>\n<li><code>llvm-as a.ll -o a.bc</code>：将人可读的LLVM IR编译为二进制LLVM IR</li>\n<li><code>llvm-dis a.bc -o a.ll</code>：将二进制LLVM IR反编译为人可读的LLVM IR</li>\n</ul>\n</li>\n<li><a href=\"https://llvm.org/docs/CommandGuide/llc.html\" target=\"_blank\" rel=\"noopener\">llc</a><ul>\n<li><code>llc a.ll -o a.out</code>：将LLVM IR编译为汇编代码，进而可以使用原生汇编器编译为可执行文件</li>\n</ul>\n</li>\n<li><a href=\"https://llvm.org/docs/CommandGuide/lli.html\" target=\"_blank\" rel=\"noopener\">lli</a><ul>\n<li><code>lli a.ll</code>：直接解释执行LLVM IR</li>\n</ul>\n</li>\n<li><a href=\"https://llvm.org/docs/CommandGuide/llvm-link.html\" target=\"_blank\" rel=\"noopener\">llvm-link</a><ul>\n<li><code>llvm-link -S add.ll main.ll -o all.ll</code>：链接多个LLVM IR为一个LLVM IR文件，<code>-S</code>表示输出的为人可读的LLVM IR，默认为二进制LLVM IR</li>\n</ul>\n</li>\n<li><a href=\"https://llvm.org/docs/CommandGuide/llvm-config.html\" target=\"_blank\" rel=\"noopener\">llvm-config</a>：使用<code>llvm-config --help</code>查看帮助。给依赖LLVM的项目提供支持，输出LLVM库的头文件地址、库文件地址、库列表。<ul>\n<li><code>llvm-config --cxxflags</code>：生成编译时的头文件库参数，比如在我电脑上会输出<code>-I/usr/local/Cellar/llvm/10.0.0_3/include -std=c++14 -stdlib=libc++  -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS</code></li>\n<li><code>llvm-config --ldflags</code>：生成链接时的LLVM库文件地址，比如在我电脑上会输出<code>-L/usr/local/Cellar/llvm/10.0.0_3/lib -Wl,-search_paths_first -Wl,-headerpad_max_install_names</code></li>\n<li><code>llvm-config --libs</code>：生成LLVM提供的库名称，结合<code>llvm-config --ldflags</code>，就可以让链接器找到对应的库文件。在<code>--libs</code>后面还可以添加各种组件名称，不添加表示所有组件。比如<code>--libs core native</code>，则只会输出core和native组件相关的库。通过下面的<code>llvm-config --components</code>命令可以列举出所有的LLVM组件列表</li>\n<li><code>llvm-config --components</code>：输出所有的LLVM组件</li>\n</ul>\n</li>\n</ul>\n<p>官方文档参考：</p>\n<ul>\n<li><a href=\"https://llvm.org/docs/CommandGuide/index.html\" target=\"_blank\" rel=\"noopener\">LLVM Command Guide</a>：命令行工具使用说明</li>\n</ul>\n<!--\n## LLVM项目结构简介\n\n// TODO\n-->"}],"PostAsset":[],"PostCategory":[{"post_id":"ckc1clp120000acjkf33f5ksc","category_id":"ckc1clp1b0002acjkf15hgfd8","_id":"ckc1clp1j0008acjk4f102glg"},{"post_id":"ckc1clp180001acjk8vzkhqqc","category_id":"ckc1clp1h0005acjkei870rmi","_id":"ckc1clp1m000cacjk12eo612l"},{"post_id":"ckc1clp1e0004acjkhyjo35l7","category_id":"ckc1clp1b0002acjkf15hgfd8","_id":"ckc1clp1n000eacjk8ocibo65"}],"PostTag":[{"post_id":"ckc1clp120000acjkf33f5ksc","tag_id":"ckc1clp1e0003acjkd8l7by16","_id":"ckc1clp1i0007acjk1iphc12u"},{"post_id":"ckc1clp180001acjk8vzkhqqc","tag_id":"ckc1clp1h0006acjk6mqq5jtc","_id":"ckc1clp1l000bacjk4pci1mpo"},{"post_id":"ckc1clp1e0004acjkhyjo35l7","tag_id":"ckc1clp1e0003acjkd8l7by16","_id":"ckc1clp1n000dacjk3mk83se5"}],"Tag":[{"name":"llvm","_id":"ckc1clp1e0003acjkd8l7by16"},{"name":"guide","_id":"ckc1clp1h0006acjk6mqq5jtc"}]}}